import {
  require_jquery
} from "./chunk-REYSB7VA.js";
import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/jquery-validation/dist/jquery.validate.min.js
var require_jquery_validate_min = __commonJS({
  "node_modules/jquery-validation/dist/jquery.validate.min.js"(exports, module) {
    !function(a) {
      "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof module && module.exports ? module.exports = a(require_jquery()) : a(jQuery);
    }(function(a) {
      a.extend(a.fn, { validate: function(b2) {
        if (!this.length)
          return void (b2 && b2.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing."));
        var c2 = a.data(this[0], "validator");
        return c2 ? c2 : (this.attr("novalidate", "novalidate"), c2 = new a.validator(b2, this[0]), a.data(this[0], "validator", c2), c2.settings.onsubmit && (this.on("click.validate", ":submit", function(b3) {
          c2.submitButton = b3.currentTarget, a(this).hasClass("cancel") && (c2.cancelSubmit = true), void 0 !== a(this).attr("formnovalidate") && (c2.cancelSubmit = true);
        }), this.on("submit.validate", function(b3) {
          function d2() {
            var d3, e;
            return c2.submitButton && (c2.settings.submitHandler || c2.formSubmitted) && (d3 = a("<input type='hidden'/>").attr("name", c2.submitButton.name).val(a(c2.submitButton).val()).appendTo(c2.currentForm)), !(c2.settings.submitHandler && !c2.settings.debug) || (e = c2.settings.submitHandler.call(c2, c2.currentForm, b3), d3 && d3.remove(), void 0 !== e && e);
          }
          return c2.settings.debug && b3.preventDefault(), c2.cancelSubmit ? (c2.cancelSubmit = false, d2()) : c2.form() ? c2.pendingRequest ? (c2.formSubmitted = true, false) : d2() : (c2.focusInvalid(), false);
        })), c2);
      }, valid: function() {
        var b2, c2, d2;
        return a(this[0]).is("form") ? b2 = this.validate().form() : (d2 = [], b2 = true, c2 = a(this[0].form).validate(), this.each(function() {
          b2 = c2.element(this) && b2, b2 || (d2 = d2.concat(c2.errorList));
        }), c2.errorList = d2), b2;
      }, rules: function(b2, c2) {
        var d2, e, f, g, h, i, j = this[0], k = "undefined" != typeof this.attr("contenteditable") && "false" !== this.attr("contenteditable");
        if (null != j && (!j.form && k && (j.form = this.closest("form")[0], j.name = this.attr("name")), null != j.form)) {
          if (b2)
            switch (d2 = a.data(j.form, "validator").settings, e = d2.rules, f = a.validator.staticRules(j), b2) {
              case "add":
                a.extend(f, a.validator.normalizeRule(c2)), delete f.messages, e[j.name] = f, c2.messages && (d2.messages[j.name] = a.extend(d2.messages[j.name], c2.messages));
                break;
              case "remove":
                return c2 ? (i = {}, a.each(c2.split(/\s/), function(a2, b3) {
                  i[b3] = f[b3], delete f[b3];
                }), i) : (delete e[j.name], f);
            }
          return g = a.validator.normalizeRules(a.extend({}, a.validator.classRules(j), a.validator.attributeRules(j), a.validator.dataRules(j), a.validator.staticRules(j)), j), g.required && (h = g.required, delete g.required, g = a.extend({ required: h }, g)), g.remote && (h = g.remote, delete g.remote, g = a.extend(g, { remote: h })), g;
        }
      } });
      var b = function(a2) {
        return a2.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
      };
      a.extend(a.expr.pseudos || a.expr[":"], { blank: function(c2) {
        return !b("" + a(c2).val());
      }, filled: function(c2) {
        var d2 = a(c2).val();
        return null !== d2 && !!b("" + d2);
      }, unchecked: function(b2) {
        return !a(b2).prop("checked");
      } }), a.validator = function(b2, c2) {
        this.settings = a.extend(true, {}, a.validator.defaults, b2), this.currentForm = c2, this.init();
      }, a.validator.format = function(b2, c2) {
        return 1 === arguments.length ? function() {
          var c3 = a.makeArray(arguments);
          return c3.unshift(b2), a.validator.format.apply(this, c3);
        } : void 0 === c2 ? b2 : (arguments.length > 2 && c2.constructor !== Array && (c2 = a.makeArray(arguments).slice(1)), c2.constructor !== Array && (c2 = [c2]), a.each(c2, function(a2, c3) {
          b2 = b2.replace(new RegExp("\\{" + a2 + "\\}", "g"), function() {
            return c3;
          });
        }), b2);
      }, a.extend(a.validator, { defaults: { messages: {}, groups: {}, rules: {}, errorClass: "error", pendingClass: "pending", validClass: "valid", errorElement: "label", focusCleanup: false, focusInvalid: true, errorContainer: a([]), errorLabelContainer: a([]), onsubmit: true, ignore: ":hidden", ignoreTitle: false, onfocusin: function(a2) {
        this.lastActive = a2, this.settings.focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, a2, this.settings.errorClass, this.settings.validClass), this.hideThese(this.errorsFor(a2)));
      }, onfocusout: function(a2) {
        this.checkable(a2) || !(a2.name in this.submitted) && this.optional(a2) || this.element(a2);
      }, onkeyup: function(b2, c2) {
        var d2 = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];
        9 === c2.which && "" === this.elementValue(b2) || a.inArray(c2.keyCode, d2) !== -1 || (b2.name in this.submitted || b2.name in this.invalid) && this.element(b2);
      }, onclick: function(a2) {
        a2.name in this.submitted ? this.element(a2) : a2.parentNode.name in this.submitted && this.element(a2.parentNode);
      }, highlight: function(b2, c2, d2) {
        "radio" === b2.type ? this.findByName(b2.name).addClass(c2).removeClass(d2) : a(b2).addClass(c2).removeClass(d2);
      }, unhighlight: function(b2, c2, d2) {
        "radio" === b2.type ? this.findByName(b2.name).removeClass(c2).addClass(d2) : a(b2).removeClass(c2).addClass(d2);
      } }, setDefaults: function(b2) {
        a.extend(a.validator.defaults, b2);
      }, messages: { required: "This field is required.", remote: "Please fix this field.", email: "Please enter a valid email address.", url: "Please enter a valid URL.", date: "Please enter a valid date.", dateISO: "Please enter a valid date (ISO).", number: "Please enter a valid number.", digits: "Please enter only digits.", equalTo: "Please enter the same value again.", maxlength: a.validator.format("Please enter no more than {0} characters."), minlength: a.validator.format("Please enter at least {0} characters."), rangelength: a.validator.format("Please enter a value between {0} and {1} characters long."), range: a.validator.format("Please enter a value between {0} and {1}."), max: a.validator.format("Please enter a value less than or equal to {0}."), min: a.validator.format("Please enter a value greater than or equal to {0}."), step: a.validator.format("Please enter a multiple of {0}.") }, autoCreateRanges: false, prototype: { init: function() {
        function b2(b3) {
          var c3 = "undefined" != typeof a(this).attr("contenteditable") && "false" !== a(this).attr("contenteditable");
          if (!this.form && c3 && (this.form = a(this).closest("form")[0], this.name = a(this).attr("name")), d2 === this.form) {
            var e2 = a.data(this.form, "validator"), f = "on" + b3.type.replace(/^validate/, ""), g = e2.settings;
            g[f] && !a(this).is(g.ignore) && g[f].call(e2, this, b3);
          }
        }
        this.labelContainer = a(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || a(this.currentForm), this.containers = a(this.settings.errorContainer).add(this.settings.errorLabelContainer), this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, this.invalid = {}, this.reset();
        var c2, d2 = this.currentForm, e = this.groups = {};
        a.each(this.settings.groups, function(b3, c3) {
          "string" == typeof c3 && (c3 = c3.split(/\s/)), a.each(c3, function(a2, c4) {
            e[c4] = b3;
          });
        }), c2 = this.settings.rules, a.each(c2, function(b3, d3) {
          c2[b3] = a.validator.normalizeRule(d3);
        }), a(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']", b2).on("click.validate", "select, option, [type='radio'], [type='checkbox']", b2), this.settings.invalidHandler && a(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler);
      }, form: function() {
        return this.checkForm(), a.extend(this.submitted, this.errorMap), this.invalid = a.extend({}, this.errorMap), this.valid() || a(this.currentForm).triggerHandler("invalid-form", [this]), this.showErrors(), this.valid();
      }, checkForm: function() {
        this.prepareForm();
        for (var a2 = 0, b2 = this.currentElements = this.elements(); b2[a2]; a2++)
          this.check(b2[a2]);
        return this.valid();
      }, element: function(b2) {
        var c2, d2, e = this.clean(b2), f = this.validationTargetFor(e), g = this, h = true;
        return void 0 === f ? delete this.invalid[e.name] : (this.prepareElement(f), this.currentElements = a(f), d2 = this.groups[f.name], d2 && a.each(this.groups, function(a2, b3) {
          b3 === d2 && a2 !== f.name && (e = g.validationTargetFor(g.clean(g.findByName(a2))), e && e.name in g.invalid && (g.currentElements.push(e), h = g.check(e) && h));
        }), c2 = this.check(f) !== false, h = h && c2, c2 ? this.invalid[f.name] = false : this.invalid[f.name] = true, this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), a(b2).attr("aria-invalid", !c2)), h;
      }, showErrors: function(b2) {
        if (b2) {
          var c2 = this;
          a.extend(this.errorMap, b2), this.errorList = a.map(this.errorMap, function(a2, b3) {
            return { message: a2, element: c2.findByName(b3)[0] };
          }), this.successList = a.grep(this.successList, function(a2) {
            return !(a2.name in b2);
          });
        }
        this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors();
      }, resetForm: function() {
        a.fn.resetForm && a(this.currentForm).resetForm(), this.invalid = {}, this.submitted = {}, this.prepareForm(), this.hideErrors();
        var b2 = this.elements().removeData("previousValue").removeAttr("aria-invalid");
        this.resetElements(b2);
      }, resetElements: function(a2) {
        var b2;
        if (this.settings.unhighlight)
          for (b2 = 0; a2[b2]; b2++)
            this.settings.unhighlight.call(this, a2[b2], this.settings.errorClass, ""), this.findByName(a2[b2].name).removeClass(this.settings.validClass);
        else
          a2.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
      }, numberOfInvalids: function() {
        return this.objectLength(this.invalid);
      }, objectLength: function(a2) {
        var b2, c2 = 0;
        for (b2 in a2)
          void 0 !== a2[b2] && null !== a2[b2] && a2[b2] !== false && c2++;
        return c2;
      }, hideErrors: function() {
        this.hideThese(this.toHide);
      }, hideThese: function(a2) {
        a2.not(this.containers).text(""), this.addWrapper(a2).hide();
      }, valid: function() {
        return 0 === this.size();
      }, size: function() {
        return this.errorList.length;
      }, focusInvalid: function() {
        if (this.settings.focusInvalid)
          try {
            a(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").trigger("focus").trigger("focusin");
          } catch (b2) {
          }
      }, findLastActive: function() {
        var b2 = this.lastActive;
        return b2 && 1 === a.grep(this.errorList, function(a2) {
          return a2.element.name === b2.name;
        }).length && b2;
      }, elements: function() {
        var b2 = this, c2 = {};
        return a(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function() {
          var d2 = this.name || a(this).attr("name"), e = "undefined" != typeof a(this).attr("contenteditable") && "false" !== a(this).attr("contenteditable");
          return !d2 && b2.settings.debug && window.console && console.error("%o has no name assigned", this), e && (this.form = a(this).closest("form")[0], this.name = d2), this.form === b2.currentForm && (!(d2 in c2 || !b2.objectLength(a(this).rules())) && (c2[d2] = true, true));
        });
      }, clean: function(b2) {
        return a(b2)[0];
      }, errors: function() {
        var b2 = this.settings.errorClass.split(" ").join(".");
        return a(this.settings.errorElement + "." + b2, this.errorContext);
      }, resetInternals: function() {
        this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = a([]), this.toHide = a([]);
      }, reset: function() {
        this.resetInternals(), this.currentElements = a([]);
      }, prepareForm: function() {
        this.reset(), this.toHide = this.errors().add(this.containers);
      }, prepareElement: function(a2) {
        this.reset(), this.toHide = this.errorsFor(a2);
      }, elementValue: function(b2) {
        var c2, d2, e = a(b2), f = b2.type, g = "undefined" != typeof e.attr("contenteditable") && "false" !== e.attr("contenteditable");
        return "radio" === f || "checkbox" === f ? this.findByName(b2.name).filter(":checked").val() : "number" === f && "undefined" != typeof b2.validity ? b2.validity.badInput ? "NaN" : e.val() : (c2 = g ? e.text() : e.val(), "file" === f ? "C:\\fakepath\\" === c2.substr(0, 12) ? c2.substr(12) : (d2 = c2.lastIndexOf("/"), d2 >= 0 ? c2.substr(d2 + 1) : (d2 = c2.lastIndexOf("\\"), d2 >= 0 ? c2.substr(d2 + 1) : c2)) : "string" == typeof c2 ? c2.replace(/\r/g, "") : c2);
      }, check: function(b2) {
        b2 = this.validationTargetFor(this.clean(b2));
        var c2, d2, e, f, g = a(b2).rules(), h = a.map(g, function(a2, b3) {
          return b3;
        }).length, i = false, j = this.elementValue(b2);
        "function" == typeof g.normalizer ? f = g.normalizer : "function" == typeof this.settings.normalizer && (f = this.settings.normalizer), f && (j = f.call(b2, j), delete g.normalizer);
        for (d2 in g) {
          e = { method: d2, parameters: g[d2] };
          try {
            if (c2 = a.validator.methods[d2].call(this, j, b2, e.parameters), "dependency-mismatch" === c2 && 1 === h) {
              i = true;
              continue;
            }
            if (i = false, "pending" === c2)
              return void (this.toHide = this.toHide.not(this.errorsFor(b2)));
            if (!c2)
              return this.formatAndAdd(b2, e), false;
          } catch (k) {
            throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + b2.id + ", check the '" + e.method + "' method.", k), k instanceof TypeError && (k.message += ".  Exception occurred when checking element " + b2.id + ", check the '" + e.method + "' method."), k;
          }
        }
        if (!i)
          return this.objectLength(g) && this.successList.push(b2), true;
      }, customDataMessage: function(b2, c2) {
        return a(b2).data("msg" + c2.charAt(0).toUpperCase() + c2.substring(1).toLowerCase()) || a(b2).data("msg");
      }, customMessage: function(a2, b2) {
        var c2 = this.settings.messages[a2];
        return c2 && (c2.constructor === String ? c2 : c2[b2]);
      }, findDefined: function() {
        for (var a2 = 0; a2 < arguments.length; a2++)
          if (void 0 !== arguments[a2])
            return arguments[a2];
      }, defaultMessage: function(b2, c2) {
        "string" == typeof c2 && (c2 = { method: c2 });
        var d2 = this.findDefined(this.customMessage(b2.name, c2.method), this.customDataMessage(b2, c2.method), !this.settings.ignoreTitle && b2.title || void 0, a.validator.messages[c2.method], "<strong>Warning: No message defined for " + b2.name + "</strong>"), e = /\$?\{(\d+)\}/g;
        return "function" == typeof d2 ? d2 = d2.call(this, c2.parameters, b2) : e.test(d2) && (d2 = a.validator.format(d2.replace(e, "{$1}"), c2.parameters)), d2;
      }, formatAndAdd: function(a2, b2) {
        var c2 = this.defaultMessage(a2, b2);
        this.errorList.push({ message: c2, element: a2, method: b2.method }), this.errorMap[a2.name] = c2, this.submitted[a2.name] = c2;
      }, addWrapper: function(a2) {
        return this.settings.wrapper && (a2 = a2.add(a2.parent(this.settings.wrapper))), a2;
      }, defaultShowErrors: function() {
        var a2, b2, c2;
        for (a2 = 0; this.errorList[a2]; a2++)
          c2 = this.errorList[a2], this.settings.highlight && this.settings.highlight.call(this, c2.element, this.settings.errorClass, this.settings.validClass), this.showLabel(c2.element, c2.message);
        if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success)
          for (a2 = 0; this.successList[a2]; a2++)
            this.showLabel(this.successList[a2]);
        if (this.settings.unhighlight)
          for (a2 = 0, b2 = this.validElements(); b2[a2]; a2++)
            this.settings.unhighlight.call(this, b2[a2], this.settings.errorClass, this.settings.validClass);
        this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show();
      }, validElements: function() {
        return this.currentElements.not(this.invalidElements());
      }, invalidElements: function() {
        return a(this.errorList).map(function() {
          return this.element;
        });
      }, showLabel: function(b2, c2) {
        var d2, e, f, g, h = this.errorsFor(b2), i = this.idOrName(b2), j = a(b2).attr("aria-describedby");
        h.length ? (h.removeClass(this.settings.validClass).addClass(this.settings.errorClass), h.html(c2)) : (h = a("<" + this.settings.errorElement + ">").attr("id", i + "-error").addClass(this.settings.errorClass).html(c2 || ""), d2 = h, this.settings.wrapper && (d2 = h.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), this.labelContainer.length ? this.labelContainer.append(d2) : this.settings.errorPlacement ? this.settings.errorPlacement.call(this, d2, a(b2)) : d2.insertAfter(b2), h.is("label") ? h.attr("for", i) : 0 === h.parents("label[for='" + this.escapeCssMeta(i) + "']").length && (f = h.attr("id"), j ? j.match(new RegExp("\\b" + this.escapeCssMeta(f) + "\\b")) || (j += " " + f) : j = f, a(b2).attr("aria-describedby", j), e = this.groups[b2.name], e && (g = this, a.each(g.groups, function(b3, c3) {
          c3 === e && a("[name='" + g.escapeCssMeta(b3) + "']", g.currentForm).attr("aria-describedby", h.attr("id"));
        })))), !c2 && this.settings.success && (h.text(""), "string" == typeof this.settings.success ? h.addClass(this.settings.success) : this.settings.success(h, b2)), this.toShow = this.toShow.add(h);
      }, errorsFor: function(b2) {
        var c2 = this.escapeCssMeta(this.idOrName(b2)), d2 = a(b2).attr("aria-describedby"), e = "label[for='" + c2 + "'], label[for='" + c2 + "'] *";
        return d2 && (e = e + ", #" + this.escapeCssMeta(d2).replace(/\s+/g, ", #")), this.errors().filter(e);
      }, escapeCssMeta: function(a2) {
        return void 0 === a2 ? "" : a2.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
      }, idOrName: function(a2) {
        return this.groups[a2.name] || (this.checkable(a2) ? a2.name : a2.id || a2.name);
      }, validationTargetFor: function(b2) {
        return this.checkable(b2) && (b2 = this.findByName(b2.name)), a(b2).not(this.settings.ignore)[0];
      }, checkable: function(a2) {
        return /radio|checkbox/i.test(a2.type);
      }, findByName: function(b2) {
        return a(this.currentForm).find("[name='" + this.escapeCssMeta(b2) + "']");
      }, getLength: function(b2, c2) {
        switch (c2.nodeName.toLowerCase()) {
          case "select":
            return a("option:selected", c2).length;
          case "input":
            if (this.checkable(c2))
              return this.findByName(c2.name).filter(":checked").length;
        }
        return b2.length;
      }, depend: function(a2, b2) {
        return !this.dependTypes[typeof a2] || this.dependTypes[typeof a2](a2, b2);
      }, dependTypes: { "boolean": function(a2) {
        return a2;
      }, string: function(b2, c2) {
        return !!a(b2, c2.form).length;
      }, "function": function(a2, b2) {
        return a2(b2);
      } }, optional: function(b2) {
        var c2 = this.elementValue(b2);
        return !a.validator.methods.required.call(this, c2, b2) && "dependency-mismatch";
      }, startRequest: function(b2) {
        this.pending[b2.name] || (this.pendingRequest++, a(b2).addClass(this.settings.pendingClass), this.pending[b2.name] = true);
      }, stopRequest: function(b2, c2) {
        this.pendingRequest--, this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[b2.name], a(b2).removeClass(this.settings.pendingClass), c2 && 0 === this.pendingRequest && this.formSubmitted && this.form() && 0 === this.pendingRequest ? (a(this.currentForm).trigger("submit"), this.submitButton && a("input:hidden[name='" + this.submitButton.name + "']", this.currentForm).remove(), this.formSubmitted = false) : !c2 && 0 === this.pendingRequest && this.formSubmitted && (a(this.currentForm).triggerHandler("invalid-form", [this]), this.formSubmitted = false);
      }, previousValue: function(b2, c2) {
        return c2 = "string" == typeof c2 && c2 || "remote", a.data(b2, "previousValue") || a.data(b2, "previousValue", { old: null, valid: true, message: this.defaultMessage(b2, { method: c2 }) });
      }, destroy: function() {
        this.resetForm(), a(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur");
      } }, classRuleSettings: { required: { required: true }, email: { email: true }, url: { url: true }, date: { date: true }, dateISO: { dateISO: true }, number: { number: true }, digits: { digits: true }, creditcard: { creditcard: true } }, addClassRules: function(b2, c2) {
        b2.constructor === String ? this.classRuleSettings[b2] = c2 : a.extend(this.classRuleSettings, b2);
      }, classRules: function(b2) {
        var c2 = {}, d2 = a(b2).attr("class");
        return d2 && a.each(d2.split(" "), function() {
          this in a.validator.classRuleSettings && a.extend(c2, a.validator.classRuleSettings[this]);
        }), c2;
      }, normalizeAttributeRule: function(a2, b2, c2, d2) {
        /min|max|step/.test(c2) && (null === b2 || /number|range|text/.test(b2)) && (d2 = Number(d2), isNaN(d2) && (d2 = void 0)), d2 || 0 === d2 ? a2[c2] = d2 : b2 === c2 && "range" !== b2 && (a2["date" === b2 ? "dateISO" : c2] = true);
      }, attributeRules: function(b2) {
        var c2, d2, e = {}, f = a(b2), g = b2.getAttribute("type");
        for (c2 in a.validator.methods)
          "required" === c2 ? (d2 = b2.getAttribute(c2), "" === d2 && (d2 = true), d2 = !!d2) : d2 = f.attr(c2), this.normalizeAttributeRule(e, g, c2, d2);
        return e.maxlength && /-1|2147483647|524288/.test(e.maxlength) && delete e.maxlength, e;
      }, dataRules: function(b2) {
        var c2, d2, e = {}, f = a(b2), g = b2.getAttribute("type");
        for (c2 in a.validator.methods)
          d2 = f.data("rule" + c2.charAt(0).toUpperCase() + c2.substring(1).toLowerCase()), "" === d2 && (d2 = true), this.normalizeAttributeRule(e, g, c2, d2);
        return e;
      }, staticRules: function(b2) {
        var c2 = {}, d2 = a.data(b2.form, "validator");
        return d2.settings.rules && (c2 = a.validator.normalizeRule(d2.settings.rules[b2.name]) || {}), c2;
      }, normalizeRules: function(b2, c2) {
        return a.each(b2, function(d2, e) {
          if (e === false)
            return void delete b2[d2];
          if (e.param || e.depends) {
            var f = true;
            switch (typeof e.depends) {
              case "string":
                f = !!a(e.depends, c2.form).length;
                break;
              case "function":
                f = e.depends.call(c2, c2);
            }
            f ? b2[d2] = void 0 === e.param || e.param : (a.data(c2.form, "validator").resetElements(a(c2)), delete b2[d2]);
          }
        }), a.each(b2, function(a2, d2) {
          b2[a2] = "function" == typeof d2 && "normalizer" !== a2 ? d2(c2) : d2;
        }), a.each(["minlength", "maxlength"], function() {
          b2[this] && (b2[this] = Number(b2[this]));
        }), a.each(["rangelength", "range"], function() {
          var a2;
          b2[this] && (Array.isArray(b2[this]) ? b2[this] = [Number(b2[this][0]), Number(b2[this][1])] : "string" == typeof b2[this] && (a2 = b2[this].replace(/[\[\]]/g, "").split(/[\s,]+/), b2[this] = [Number(a2[0]), Number(a2[1])]));
        }), a.validator.autoCreateRanges && (null != b2.min && null != b2.max && (b2.range = [b2.min, b2.max], delete b2.min, delete b2.max), null != b2.minlength && null != b2.maxlength && (b2.rangelength = [b2.minlength, b2.maxlength], delete b2.minlength, delete b2.maxlength)), b2;
      }, normalizeRule: function(b2) {
        if ("string" == typeof b2) {
          var c2 = {};
          a.each(b2.split(/\s/), function() {
            c2[this] = true;
          }), b2 = c2;
        }
        return b2;
      }, addMethod: function(b2, c2, d2) {
        a.validator.methods[b2] = c2, a.validator.messages[b2] = void 0 !== d2 ? d2 : a.validator.messages[b2], c2.length < 3 && a.validator.addClassRules(b2, a.validator.normalizeRule(b2));
      }, methods: { required: function(b2, c2, d2) {
        if (!this.depend(d2, c2))
          return "dependency-mismatch";
        if ("select" === c2.nodeName.toLowerCase()) {
          var e = a(c2).val();
          return e && e.length > 0;
        }
        return this.checkable(c2) ? this.getLength(b2, c2) > 0 : void 0 !== b2 && null !== b2 && b2.length > 0;
      }, email: function(a2, b2) {
        return this.optional(b2) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a2);
      }, url: function(a2, b2) {
        return this.optional(b2) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})+(?::(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(a2);
      }, date: function() {
        var a2 = false;
        return function(b2, c2) {
          return a2 || (a2 = true, this.settings.debug && window.console && console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")), this.optional(c2) || !/Invalid|NaN/.test(new Date(b2).toString());
        };
      }(), dateISO: function(a2, b2) {
        return this.optional(b2) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(a2);
      }, number: function(a2, b2) {
        return this.optional(b2) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a2);
      }, digits: function(a2, b2) {
        return this.optional(b2) || /^\d+$/.test(a2);
      }, minlength: function(a2, b2, c2) {
        var d2 = Array.isArray(a2) ? a2.length : this.getLength(a2, b2);
        return this.optional(b2) || d2 >= c2;
      }, maxlength: function(a2, b2, c2) {
        var d2 = Array.isArray(a2) ? a2.length : this.getLength(a2, b2);
        return this.optional(b2) || d2 <= c2;
      }, rangelength: function(a2, b2, c2) {
        var d2 = Array.isArray(a2) ? a2.length : this.getLength(a2, b2);
        return this.optional(b2) || d2 >= c2[0] && d2 <= c2[1];
      }, min: function(a2, b2, c2) {
        return this.optional(b2) || a2 >= c2;
      }, max: function(a2, b2, c2) {
        return this.optional(b2) || a2 <= c2;
      }, range: function(a2, b2, c2) {
        return this.optional(b2) || a2 >= c2[0] && a2 <= c2[1];
      }, step: function(b2, c2, d2) {
        var e, f = a(c2).attr("type"), g = "Step attribute on input type " + f + " is not supported.", h = ["text", "number", "range"], i = new RegExp("\\b" + f + "\\b"), j = f && !i.test(h.join()), k = function(a2) {
          var b3 = ("" + a2).match(/(?:\.(\d+))?$/);
          return b3 && b3[1] ? b3[1].length : 0;
        }, l = function(a2) {
          return Math.round(a2 * Math.pow(10, e));
        }, m = true;
        if (j)
          throw new Error(g);
        return e = k(d2), (k(b2) > e || l(b2) % l(d2) !== 0) && (m = false), this.optional(c2) || m;
      }, equalTo: function(b2, c2, d2) {
        var e = a(d2);
        return this.settings.onfocusout && e.not(".validate-equalTo-blur").length && e.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function() {
          a(c2).valid();
        }), b2 === e.val();
      }, remote: function(b2, c2, d2, e) {
        if (this.optional(c2))
          return "dependency-mismatch";
        e = "string" == typeof e && e || "remote";
        var f, g, h, i = this.previousValue(c2, e);
        return this.settings.messages[c2.name] || (this.settings.messages[c2.name] = {}), i.originalMessage = i.originalMessage || this.settings.messages[c2.name][e], this.settings.messages[c2.name][e] = i.message, d2 = "string" == typeof d2 && { url: d2 } || d2, h = a.param(a.extend({ data: b2 }, d2.data)), i.old === h ? i.valid : (i.old = h, f = this, this.startRequest(c2), g = {}, g[c2.name] = b2, a.ajax(a.extend(true, { mode: "abort", port: "validate" + c2.name, dataType: "json", data: g, context: f.currentForm, success: function(a2) {
          var d3, g2, h2, j = a2 === true || "true" === a2;
          f.settings.messages[c2.name][e] = i.originalMessage, j ? (h2 = f.formSubmitted, f.resetInternals(), f.toHide = f.errorsFor(c2), f.formSubmitted = h2, f.successList.push(c2), f.invalid[c2.name] = false, f.showErrors()) : (d3 = {}, g2 = a2 || f.defaultMessage(c2, { method: e, parameters: b2 }), d3[c2.name] = i.message = g2, f.invalid[c2.name] = true, f.showErrors(d3)), i.valid = j, f.stopRequest(c2, j);
        } }, d2)), "pending");
      } } });
      var c, d = {};
      return a.ajaxPrefilter ? a.ajaxPrefilter(function(a2, b2, c2) {
        var e = a2.port;
        "abort" === a2.mode && (d[e] && d[e].abort(), d[e] = c2);
      }) : (c = a.ajax, a.ajax = function(b2) {
        var e = ("mode" in b2 ? b2 : a.ajaxSettings).mode, f = ("port" in b2 ? b2 : a.ajaxSettings).port;
        return "abort" === e ? (d[f] && d[f].abort(), d[f] = c.apply(this, arguments), d[f]) : c.apply(this, arguments);
      }), a;
    });
  }
});

// dep:jquery-validation_dist_jquery__validate__min
var jquery_validation_dist_jquery_validate_min_default = require_jquery_validate_min();
export {
  jquery_validation_dist_jquery_validate_min_default as default
};
/*! jQuery Validation Plugin - v1.19.5 - 7/1/2022
 * https://jqueryvalidation.org/
 * Copyright (c) 2022 Jörn Zaefferer; Licensed MIT */
//# sourceMappingURL=jquery-validation_dist_jquery__validate__min.js.map
